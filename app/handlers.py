import datetime

from aiogram import html, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InaccessibleMessage, \
    FSInputFile
from aiogram import Router

from app.kb import main_kb, month_kb
from app.models import SportActivity
from app.services import BoysService, SportService
from app.settings import get_settings
from app.db import async_session


router = Router()


@router.message(CommandStart())
@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def start_handler(message: Message) -> None:
    if message.from_user is not None:
        await message.answer(
            f"–°–∞–ª—é—Ç, –±–æ—É—Ç–∏—à–∫–∞ {html.bold(message.from_user.first_name)}!",
            reply_markup=main_kb()
        )
    else:
        await message.answer("–°–∞–ª—é—Ç, –±–æ—É—Ç–∏—à–∫–∞!", reply_markup=main_kb())


@router.message(Command("remaining_time"))
@router.message(F.text == 'üßó‚Äç‚ôÇÔ∏è –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≠–ª—å–±—Ä—É—Å–∞?')
async def remaining_time_handler(message: Message) -> None:
    target_date = datetime.date.fromisoformat(get_settings().target_date)
    remaining_time = target_date - datetime.date.today()
    await message.answer(
        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {html.bold(str(remaining_time.days))}",
        reply_markup=main_kb()
    )


@router.message(Command("add_sport_report"))
@router.message(F.text == "üèãÔ∏è –ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è –¥–Ω–µ–º Gym'–∞")
async def add_sport_report_handler(message: Message) -> None:
    tg_user = message.from_user
    async with async_session() as session:
        if tg_user is None\
                or tg_user.username is None\
                or await BoysService.get_boy(session,
                                             tg_user.username) is None:
            await message.answer("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ!!1!!1!")
            return

    await message.answer("–ë—Ä–æ, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=month_kb())


@router.callback_query(F.data.startswith("day_"))
async def write_report(call: CallbackQuery) -> None:
    tg_user = call.from_user
    if call.message is not None\
            and not isinstance(call.message, InaccessibleMessage):
        await call.message.delete()

    async with async_session() as session:
        if tg_user is None\
                or tg_user.username is None:
            await call.answer("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ!!1!!1!")
            return

        boy = await BoysService.get_boy(session, tg_user.username)

        if boy is None:
            await call.answer("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ!!1!!1!")
            return

        if call.data is None or call.data[4::] == "empty":
            await call.answer(
                "–ë—Ä–æ, —Ç—ã –≤—ã–±—Ä–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
                reply_markup=month_kb()
            )
            return

        today = datetime.date.today()
        await SportService.add_report(
            session,
            tg_username=tg_user.username,
            date=datetime.date(today.year, today.month, int(call.data[4::]))
        )

        await call.answer("Gym-day –∑–∞–ø–∏—Å–∞–Ω, –±—Ä–æ!", reply_markup=main_kb())

        if call.message is not None\
                and not isinstance(call.message, InaccessibleMessage):
            await call.message.answer_photo(
                photo=FSInputFile("static/arni.jpeg"),
                caption=f"–¢–∞–∫ –∏ –∑–∞–ø–∏—Å–∞–ª: {boy.name} –±—ã–ª –≤ Gym'–µ"
                        f" {call.data[4::]} —á–∏—Å–ª–∞ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞.\n"
                        f"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –±—Ä–æ! –ê—Ä–Ω–∏ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!",
                reply_markup=main_kb()
            )


@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏ –Ω–µ–¥–µ–ª–∏")
@router.message(Command("get_week_stats"))
async def show_week_success_handler(message: Message) -> None:
    async with async_session() as session:
        rows = await SportService.get_week_stats(session)
        if len(rows) == 0:
            await message.answer_photo(
                photo=FSInputFile("static/arni_angry.webp"),
                caption="–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –±—ã–ª–æ Gym days... –ù–µ –∑–ª–∏ –ê—Ä–Ω–∏, —Ö–æ–¥–∏ –≤ –∑–∞–ª!",
                reply_markup=main_kb()
            )

        answer = "\n".join([f'{html.bold(row[0])}: {row[1]}' for row in rows])

        await message.answer_photo(
            photo=FSInputFile("static/arni_old.webp"),
            caption=f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ Gym days:\n{answer}",
            reply_markup=main_kb()
        )


@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏ –º–µ—Å—è—Ü–∞")
@router.message(Command("get_month_stats"))
async def show_month_success_handler(message: Message) -> None:
    async with async_session() as session:
        rows = await SportService.get_month_stats(session)
        if len(rows) == 0:
            await message.answer_photo(
                photo=FSInputFile("static/arni_angry.webp"),
                caption="–í —Ç–æ–º –º–µ—Å—è—Ü–µ  –Ω–µ –±—ã–ª–æ Gym days... –ù–µ –∑–ª–∏ –ê—Ä–Ω–∏, —Ö–æ–¥–∏ –≤ –∑–∞–ª!",
                reply_markup=main_kb()
            )

        answer = "\n".join([f'{html.bold(row[0])}: {row[1]}' for row in rows])

        await message.answer_photo(
            photo=FSInputFile("static/arni_old.webp"),
            caption=f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ Gym days:\n{answer}",
            reply_markup=main_kb()
        )


@router.message()
async def wtf_handler(message: Message) -> None:
    if message.chat.type == "private":
        await message.answer(
            "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å",
            reply_markup=main_kb()
        )
