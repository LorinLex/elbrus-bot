import datetime

from aiogram import html, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InaccessibleMessage

from app import settings
from app.dal import Boy
from app.kb import main_kb


router = Router()


@router.message(CommandStart())
@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def start_handler(message: Message, boy: Boy) -> None:
    await message.answer(
        f"–°–∞–ª—é—Ç, –±–æ—É—Ç–∏—à–∫–∞ {html.bold(boy.call_sign)}!",
        reply_markup=main_kb()
    )


@router.message(Command("remaining_time"))
@router.message(F.text == 'üßó‚Äç‚ôÇÔ∏è –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≠–ª—å–±—Ä—É—Å–∞?')
async def remaining_time_handler(message: Message) -> None:
    target_date = datetime.date.fromisoformat(settings.target_date)
    remaining_time = target_date - datetime.date.today()
    await message.answer(
        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {html.bold(str(remaining_time.days))}",
        reply_markup=main_kb(),
    )


@router.callback_query(F.data == "fsm_stop")
async def fsm_stop_handler(call: CallbackQuery, state: FSMContext) -> None:
    if call.message is None or isinstance(call.message, InaccessibleMessage):
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(")
        return

    await call.message.delete()
    await state.clear()
    await call.message.answer(
        text="–û–∫–µ–π, —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_kb()
    )


@router.message()
async def wtf_handler(message: Message) -> None:
    if message.chat.type == "private":
        await message.answer(
            "–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å",
            reply_markup=main_kb()
        )
