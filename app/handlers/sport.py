import datetime
import re

from aiogram import html, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.methods import DeleteMessages
from aiogram.types import Message, CallbackQuery, InaccessibleMessage, \
    FSInputFile

from app import bot
from app.dal import Boy, add_report, get_month_stats, get_week_stats
from app.kb import confirm_inline_kb, main_kb, month_kb, stop_fsm_inline_kb
from app.states import AddSportReportStates
from app.utils import in_elbrus_height


router = Router()


@router.message(Command("add_sport_report"), F.chat.type == "private")
@router.message(F.text == "üèãÔ∏è –ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è –¥–Ω–µ–º Gym'–∞",
                F.chat.type == "private")
async def add_sport_report_handler(message: Message,
                                   state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ë—Ä–æ, –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=month_kb())
    await state.set_state(AddSportReportStates.day)


@router.callback_query(AddSportReportStates.day, F.data.startswith("day_"))
async def write_day(call: CallbackQuery, state: FSMContext) -> None:
    if call.message is None:
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(")
        return

    if call.message is not None\
            and not isinstance(call.message, InaccessibleMessage):
        await call.message.delete()

    if call.data is None or call.data[4::] == "empty":
        await state.clear()
        await state.set_state(AddSportReportStates.day)
        await call.message.answer(
            "–ë—Ä–æ, —Ç—ã –≤—ã–±—Ä–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            reply_markup=month_kb()
        )
        return

    await state.set_data({"date": call.data[4::]})
    await state.set_state(AddSportReportStates.distance)
    await call.message.answer(
        text="–ì—É–¥!\n"
             "–ê —Ç–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ç—ã –±–µ–≥–∞–ª –∏–ª–∏ —Ö–æ–¥–∏–ª, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ\n"
             "–ò–ª–∏ –Ω—É–ª—å",
        reply_markup=stop_fsm_inline_kb()
    )


@router.message(AddSportReportStates.distance)
async def write_distance(message: Message,
                         state: FSMContext,
                         boy: Boy) -> None:
    await DeleteMessages(
        chat_id=message.chat.id,
        message_ids=[message.message_id, message.message_id-1]
    ).as_(bot=bot)

    if message.text is None:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(",
                             reply_markup=stop_fsm_inline_kb())
        return

    distance = re.match(pattern=r'^\d{0,3}(?:[\.,]\d{0,3})?$',
                        string=message.text)
    if distance is None:
        await message.answer("–¢—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞",
                             reply_markup=stop_fsm_inline_kb())
        return

    report = await state.get_data()
    if message.text is not None:
        await state.set_data({**report, "distance": message.text})

    await state.set_state(AddSportReportStates.confirm)
    await message.answer(
        text=(
            f"–ó–Ω–∞—á–∏—Ç {html.bold(boy.call_sign)} –±—ã–ª –≤ Gym'–µ "
            f"{html.bold(report['date'])} —á–∏—Å–ª–∞ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞, –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–ª "
            f"{html.bold(message.text)}–∫–º.\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        ),
        reply_markup=confirm_inline_kb()
    )


@router.callback_query(AddSportReportStates.confirm, F.data == "confirm_yes")
async def write_report(call: CallbackQuery,
                       state: FSMContext,
                       boy: Boy) -> None:
    report = await state.get_data()
    today = datetime.date.today()

    await add_report(
        tg_username=boy.tg_username,
        date=datetime.date(today.year, today.month, int(report["date"])),
        distance=float(report["distance"])
    )

    await state.clear()
    await call.answer("Gym-day –∑–∞–ø–∏—Å–∞–Ω, –±—Ä–æ!", reply_markup=main_kb())

    if call.message is not None\
            and not isinstance(call.message, InaccessibleMessage):
        await call.message.delete()
        await call.message.answer_photo(
            photo=FSInputFile("static/arni.jpeg"),
            caption=(
                "–¢–∞–∫ –∏ –∑–∞–ø–∏—Å–∞–ª:\n"
                f"{html.bold(boy.name)} –±—ã–ª –≤ Gym'–µ "
                f"{html.bold(report['date'])} —á–∏—Å–ª–∞ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ "
                f"–ø—Ä–µ–æ–¥–æ–ª–µ–ª {html.bold(report['distance'])}–∫–º.\n"
                "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –±—Ä–æ! –ê—Ä–Ω–∏ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!"
            ),
            reply_markup=main_kb()
        )


@router.callback_query(AddSportReportStates.confirm, F.data == "confirm_no")
async def retry_add_sport_report_handler(call: CallbackQuery,
                                         state: FSMContext) -> None:
    if call.message is None:
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(")
        return

    if not isinstance(call.message, InaccessibleMessage):
        await call.message.delete()

    await state.clear()
    await state.set_state(AddSportReportStates.day)
    await call.message.answer("–ë—Ä–æ, –∑–∞–Ω–æ–≤–æ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å:",
                              reply_markup=month_kb())


@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏ –Ω–µ–¥–µ–ª–∏")
@router.message(Command("get_week_stats"))
async def show_week_success_handler(message: Message) -> None:
    rows = await get_week_stats()
    if len(rows) == 0:
        await message.answer_photo(
            photo=FSInputFile("static/arni_angry.webp"),
            caption="–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –±—ã–ª–æ Gym days... "
                    "–ù–µ –∑–ª–∏ –ê—Ä–Ω–∏, —Ö–æ–¥–∏ –≤ –∑–∞–ª!",
            reply_markup=main_kb(is_group=message.chat.type != "private")
        )

    stats = "".join([
        f"{html.bold(row.call_sign)}: {row.reports_count}, "
        f"–ø—Ä–æ—à–µ–ª {html.bold(str(row.sum_distance))}–∫–º –ò–õ–ò "
        f"{in_elbrus_height(row.sum_distance)}% "
        "–≤—ã—Å–æ—Ç—ã –≠–ª—å–±—Ä—É—Å–∞\n"
        for row in rows
    ])

    await message.answer_photo(
        photo=FSInputFile("static/arni_old.webp"),
        caption=f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ Gym days:\n{stats}",
        reply_markup=main_kb(is_group=message.chat.type != "private")
    )
    await message.answer(
        "P.S. –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç –≠–ª—å–±—Ä—É—Å–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ –ø—Ä—è–º–æ–π, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–π "
        "—Ü–µ–Ω—Ç—Ä—É –∑–µ–º–ª–∏, –º–∞—Ä—à—Ä—É—Ç –∫—Ä–∞—Ç–Ω–æ –±–æ–ª—å—à–µ!"
    )


@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏ –º–µ—Å—è—Ü–∞")
@router.message(Command("get_month_stats"))
async def show_month_success_handler(message: Message) -> None:
    rows = await get_month_stats()
    if len(rows) == 0:
        await message.answer_photo(
            photo=FSInputFile("static/arni_angry.webp"),
            caption="–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—ã–ª–æ Gym days... "
                    "–ù–µ –∑–ª–∏ –ê—Ä–Ω–∏, —Ö–æ–¥–∏ –≤ –∑–∞–ª!",
            reply_markup=main_kb(is_group=message.chat.type != "private")
        )

    stats = "".join([
        f"{html.bold(row.call_sign)}: {row.reports_count}, "
        f"–ø—Ä–æ—à–µ–ª {html.bold(str(row.sum_distance))}–∫–º –ò–õ–ò "
        f"{in_elbrus_height(row.sum_distance)}% "
        "–≤—ã—Å–æ—Ç—ã –≠–ª—å–±—Ä—É—Å–∞\n"
        for row in rows
    ])
    await message.answer_photo(
        photo=FSInputFile("static/arni_old.webp"),
        caption=f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ Gym days:\n{stats}",
        reply_markup=main_kb(is_group=message.chat.type != "private")
    )
