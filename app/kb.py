import datetime
from calendar import monthrange
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def main_kb(is_group: bool = False) -> ReplyKeyboardMarkup:
    kb_list = [
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è")],
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏ –º–µ—Å—è—Ü–∞")],
        [KeyboardButton(text="üòÇ –í—Å–ø–æ–º–Ω–∏ –∞–Ω–µ–∫–¥–æ—Ç!")],
    ]

    if not is_group:
        kb_list.extend([
            [KeyboardButton(text="üèãÔ∏è –ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è –¥–Ω–µ–º Gym'–∞")],
            [KeyboardButton(text="üèï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")]
        ])

    return ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëá"
    )


def month_kb() -> InlineKeyboardMarkup:
    today = datetime.date.today()
    month_days_count = monthrange(today.year, today.month)[1]
    month_start_weekday = datetime.date(today.year, today.month, 1).\
        isocalendar()[2]
    month_end_weekday = datetime.date(today.year,
                                      today.month,
                                      month_days_count).isocalendar()[2]

    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è",
                                     callback_data=f"day_{today.day}"))

    if month_start_weekday != 1:
        for i in range(1, month_start_weekday):
            builder.add(InlineKeyboardButton(text=" ",
                                             callback_data="day_empty"))

    for day in range(1, month_days_count):
        builder.add(InlineKeyboardButton(text=str(day),
                                         callback_data=f"day_{day}"))

    if month_end_weekday != 7:
        for i in range(month_end_weekday, 8):
            builder.add(InlineKeyboardButton(text=" ",
                                             callback_data="day_empty"))

    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå",
                                     callback_data="fsm_stop"))
    #  WARNING: –ï—Å–ª–∏ —Ñ–µ–≤—Ä–∞–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–Ω, –∏ –≥–æ–¥ –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π
    # - –º–æ–∂–µ—Ç –Ω–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è
    builder.adjust(1, 7, 7, 7, 7, 7, 1)

    return builder.as_markup()


def confirm_inline_kb() -> InlineKeyboardMarkup:
    kb_list = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton(text="‚õîÔ∏è –ù–µ—Ç", callback_data="confirm_no")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="fsm_stop")]
    ]

    return InlineKeyboardMarkup(
        inline_keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é"
    )


def stop_fsm_inline_kb() -> InlineKeyboardMarkup:
    kb_list = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="fsm_stop")],
    ]

    return InlineKeyboardMarkup(
        inline_keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True
    )


def update_event_inline_kb() -> InlineKeyboardMarkup:
    kb_list = [
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            callback_data="update_name"
        )],
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",
            callback_data="update_image"
        )],
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data="update_description"
        )],
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞",
            callback_data="update_date_start"
        )],
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è",
            callback_data="update_length"
        )],
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            callback_data="update_is_notified_time_left"
        )],
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
            callback_data="update_is_repeatable"
        )],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="fsm_stop")]
    ]

    return InlineKeyboardMarkup(
        inline_keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é"
    )


def event_card_inline_kb(event_id: int) -> InlineKeyboardMarkup:
    kb_list = [
        [InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=f"update_event_{event_id}"
        )],
        [InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_event_{event_id}"
        )],
    ]

    return InlineKeyboardMarkup(
        inline_keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é"
    )


def confirm_delete_inline_kb() -> InlineKeyboardMarkup:
    kb_list = [
        [InlineKeyboardButton(
            text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!",
            callback_data="confirm_yes"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå",
            callback_data="confirm_no"
        )]
    ]

    return InlineKeyboardMarkup(
        inline_keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é"
    )
